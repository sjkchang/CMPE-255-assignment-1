The core classes, functions, and methods necessary for this project are:

1. `Cell` class: This class will represent a single cell in the game grid. It will have properties for its current state (alive or dead) and its next state, and a method to calculate its next state based on the current states of its neighbors.

2. `Game` class: This class will represent the game itself. It will have a property for the game grid (a 2D array of `Cell` objects), and methods to initialize the grid with a random pattern of live and dead cells, update the grid for the next generation, and reset the grid.

3. `render` function: This function will update the visual representation of the game grid on the webpage.

4. Event listeners for the pause/unpause and reset buttons: These will pause/unpause the game and reset the game grid, respectively.

5. `server.js` file: This file will set up the Express.js server to serve the static HTML, JS, and CSS files.

Now, let's write the code for each file.

`server.js`
```javascript
const express = require('express');
const path = require('path');

const app = express();
const port = process.env.PORT || 3000;

app.use(express.static(path.join(__dirname, 'public')));

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
```

`public/index.html`
```html
<!DOCTYPE html>
<html>
<head>
  <title>Conway's Game of Life</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <canvas id="gameCanvas"></canvas>
  <button id="pauseButton">Pause</button>
  <button id="resetButton">Reset</button>
  <script src="game.js"></script>
</body>
</html>
```

`public/styles.css`
```css
body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f0f0f0;
}

#gameCanvas {
  border: 1px solid #000;
}

button {
  margin: 10px;
}
```

`public/game.js`
```javascript
class Cell {
  constructor() {
    this.currentState = Math.random() < 0.5;
    this.nextState = false;
  }

  calculateNextState(neighbors) {
    const liveNeighbors = neighbors.filter(cell => cell.currentState).length;
    if (this.currentState) {
      this.nextState = liveNeighbors === 2 || liveNeighbors === 3;
    } else {
      this.nextState = liveNeighbors === 3;
    }
  }
}

class Game {
  constructor(width, height) {
    this.width = width;
    this.height = height;
    this.grid = [];
    this.paused = false;
    this.initGrid();
  }

  initGrid() {
    for (let y = 0; y < this.height; y++) {
      const row = [];
      for (let x = 0; x < this.width; x++) {
        row.push(new Cell());
      }
      this.grid.push(row);
    }
  }

  updateGrid() {
    this.grid.forEach((row, y) => {
      row.forEach((cell, x) => {
        const neighbors = this.getNeighbors(x, y);
        cell.calculateNextState(neighbors);
      });
    });
    this.grid.forEach(row => {
      row.forEach(cell => {
        cell.currentState = cell.nextState;
      });
    });
  }

  getNeighbors(x, y) {
    const neighbors = [];
    for (let dy = -1; dy <= 1; dy++) {
      for (let dx = -1; dx <= 1; dx++) {
        if (dx !== 0 || dy !== 0) {
          const nx = x + dx;
          const ny = y + dy;
          if (nx >= 0 && nx < this.width && ny >= 0 && ny < this.height) {
            neighbors.push(this.grid[ny][nx]);
          }
        }
      }
    }
    return neighbors;
  }

  reset() {
    this.grid = [];
    this.initGrid();
  }
}

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const game = new Game(100, 100);

function render() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  game.grid.forEach((row, y) => {
    row.forEach((cell, x) => {
      ctx.fillStyle = cell.currentState ? '#000' : '#fff';
      ctx.fillRect(x, y, 1, 1);
    });
  });
}

setInterval(() => {
  if (!game.paused) {
    game.updateGrid();
    render();
  }
}, 250);

document.getElementById('pauseButton').addEventListener('click', () => {
  game.paused = !game.paused;
});

document.getElementById('resetButton').addEventListener('click', () => {
  game.reset();
});
```

`package.json`
```json
{
  "name": "conways-game-of-life",
  "version": "1.0.0",
  "description": "Conway's Game of Life implemented in JavaScript",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1"
  }
}
```

This code should be fully functional and follow SOLID principles. The `Cell` and `Game` classes each have a single responsibility, and the `Game` class is open for extension (for example, to add more game rules or change the grid size) but closed for modification. The `Cell` class depends on abstractions (the states of its neighbors) not concretions.